{"files":[{"file":"turtle.h","functions":["turtle_caller_t","turtle_handler_cb","turtle_datum_cb","turtle_initialise","turtle_finalise","turtle_strerror","turtle_strfunc","turtle_handler","turtle_projection_create","turtle_projection_destroy","turtle_projection_configure","turtle_projection_info","turtle_projection_project","turtle_projection_unproject","turtle_map_create","turtle_map_destroy","turtle_map_load","turtle_map_dump","turtle_map_fill","turtle_map_node","turtle_map_elevation","turtle_map_projection","turtle_map_info","turtle_datum_create","turtle_datum_destroy","turtle_datum_clear","turtle_datum_elevation","turtle_datum_ecef","turtle_datum_geodetic","turtle_datum_direction","turtle_datum_horizontal","turtle_client_create","turtle_client_destroy","turtle_client_clear","turtle_client_elevation"],"meta":{},"lines":801}],"functions":{"turtle_initialise":{"type":"function","file":"turtle.h","line":141,"lineto":141,"args":[{"name":"handler","type":"turtle_handler_cb *","comment":null}],"argline":"turtle_handler_cb *handler","sig":"turtle_handler_cb *","return":{"type":"void","comment":null},"description":"<p>Initialise the TURTLE library.</p>\n","comments":"<p>Initialise the library. Call <code>turtle_finalise</code> in order to unload the library. Optionally, an error handler might be provided.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function is not thread safe.</p>\n","group":"turtle"},"turtle_finalise":{"type":"function","file":"turtle.h","line":152,"lineto":152,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Finalise the TURTLE library.</p>\n","comments":"<p>Unload the library. <code>turtle_initialise</code> must have been called first.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function is not thread safe.</p>\n","group":"turtle"},"turtle_strerror":{"type":"function","file":"turtle.h","line":160,"lineto":160,"args":[{"name":"rc","type":"enum turtle_return","comment":null}],"argline":"enum turtle_return rc","sig":"enum turtle_return","return":{"type":"const char *","comment":null},"description":"<p>Return a string describing a <code>turtle_return</code> code.</p>\n","comments":"<p>This function is analog to the C89 <code>strerror</code> function but specific to TURTLE return codes. It is thread safe.</p>\n","group":"turtle"},"turtle_strfunc":{"type":"function","file":"turtle.h","line":168,"lineto":168,"args":[{"name":"function","type":"turtle_caller_t *","comment":null}],"argline":"turtle_caller_t *function","sig":"turtle_caller_t *","return":{"type":"const char *","comment":null},"description":"<p>Return a string describing a TURTLE library function.</p>\n","comments":"<p>This function is meant for verbosing when handling errors. It is thread safe.</p>\n","group":"turtle"},"turtle_handler":{"type":"function","file":"turtle.h","line":179,"lineto":179,"args":[{"name":"handler","type":"turtle_handler_cb *","comment":"The user supplied error handler.\n"}],"argline":"turtle_handler_cb *handler","sig":"turtle_handler_cb *","return":{"type":"void","comment":null},"description":"<p>Setter for the library error handler.</p>\n","comments":"<p>This function allows to set or alter the error handler. Only one error handler can be set at a time for all threads. It is not thread safe to modify it.</p>\n","group":"turtle"},"turtle_projection_create":{"type":"function","file":"turtle.h","line":220,"lineto":221,"args":[{"name":"name","type":"const char *","comment":"The name of the projection.\n"},{"name":"projection","type":"struct turtle_projection **","comment":"A handle to the projection.\n"}],"argline":"const char *name, struct turtle_projection **projection","sig":"const char *::struct turtle_projection **","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Create a new geographic projection.</p>\n","comments":"<p>The currently supported projections are <strong>Lambert</strong> and <strong>UTM</strong>. The <code>name</code>, which encodes the projection parameters, must be as following:</p>\n\n<pre><code>* Lambert I\n\n* Lambert II\n\n* Lambert IIe    (for Lambert II extended)\n\n* Lambert III\n\n* Lambert IV\n\n* Lambert 93     (conforming to RGF93)\n\n* UTM {zone}{hemisphere}\n\n* UTM {longitude}{hemisphere}\n</code></pre>\n\n<p>where {zone} is an integer in [1, 60] encoding the UTM world zone and hemisphere must be <code>N</code> for north or <code>S</code> for south, e.g. <code>UTM 31N</code> for the centre of France. Alternatively the central longitude of the UTM projection can be provided directly as an explicit floating number, e.g. <code>UTM 3.0N</code> for the UTM zone 31N as previously.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_PROJECTION    The name isn&#39;t valid.\n\nTURTLE_RETURN_MEMORY_ERROR      The projection couldnt be allocated.\n</code></pre>\n","group":"projection"},"turtle_projection_destroy":{"type":"function","file":"turtle.h","line":237,"lineto":237,"args":[{"name":"projection","type":"struct turtle_projection **","comment":"A handle to the projection.\n"}],"argline":"struct turtle_projection **projection","sig":"struct turtle_projection **","return":{"type":"void","comment":null},"description":"<p>Destroy a geographic projection.</p>\n","comments":"<p>Fully destroy a geographic projection previously allocated with <code>turtle_projection_create</code>. On return <code>projection</code> is set to <code>NULL</code>.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This must <strong>not</strong> be called on a projection handle returned by a <code>turtle_map</code>. Instead one must call <code>turtle_map_destroy</code> to get rid of both the map and its projection.</p>\n","group":"projection"},"turtle_projection_configure":{"type":"function","file":"turtle.h","line":254,"lineto":255,"args":[{"name":"name","type":"const char *","comment":"The name of the projection.\n"},{"name":"projection","type":"struct turtle_projection *","comment":"A handle to the projection.\n"}],"argline":"const char *name, struct turtle_projection *projection","sig":"const char *::struct turtle_projection *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>(Re-)configure a geographic projection.</p>\n","comments":"<p>See <code>turtle_projection_create</code> for the supported projections and valid values for the <code>name</code> parameter.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_PROJECTION    The projection isn&#39;t supported.\n</code></pre>\n","group":"projection"},"turtle_projection_info":{"type":"function","file":"turtle.h","line":281,"lineto":282,"args":[{"name":"projection","type":"const struct turtle_projection *","comment":"A handle to the projection.\n"},{"name":"name","type":"char **","comment":"The name of the projection.\n"}],"argline":"const struct turtle_projection *projection, char **name","sig":"const struct turtle_projection *::char **","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Information on a geographic projection.</p>\n","comments":"<p>This function fills in the provided <code>name</code> string with the projection details. The resulting name conforms to the inputs to <code>turtle_projection_configure</code> or <code>turtle_projection_create</code>, e.g. <code>UTM 31N</code>. See the later for a detailed description.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function allocates the <code>name</code> string. It is the user&#39;s responsability to free it when no more needed.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_PROJECTION    The projection isn&#39;t supported.\n\nTURTLE_RETURN_MEMORY_ERROR      The name string couldn&#39;t be allocated.\n</code></pre>\n","group":"projection"},"turtle_projection_project":{"type":"function","file":"turtle.h","line":304,"lineto":306,"args":[{"name":"projection","type":"const struct turtle_projection *","comment":"A handle to the projection.\n"},{"name":"latitude","type":"double","comment":"The input geodetic longitude.\n"},{"name":"longitude","type":"double","comment":null},{"name":"x","type":"double *","comment":"The output X-coordinate.\n"},{"name":"y","type":"double *","comment":"The output Y-coordinate.\n"}],"argline":"const struct turtle_projection *projection, double latitude, double longitude, double *x, double *y","sig":"const struct turtle_projection *::double::double::double *::double *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Apply a geographic projection to geodetic coordinates.</p>\n","comments":"<p>Apply the geographic projection to a set of geodetic coordinates. See <code>turtle_projection_unproject</code> for the reverse transform.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_ADDRESS       The projection is `NULL`.\n\nTURTLE_RETURN_BAD_PROJECTION    The projection isn&#39;t supported.\n</code></pre>\n","group":"projection"},"turtle_projection_unproject":{"type":"function","file":"turtle.h","line":328,"lineto":330,"args":[{"name":"projection","type":"const struct turtle_projection *","comment":"A handle to the projection.\n"},{"name":"x","type":"double","comment":"The input X-coordinate.\n"},{"name":"y","type":"double","comment":"The input Y-coordinate.\n"},{"name":"latitude","type":"double *","comment":"The output geodetic longitude.\n"},{"name":"longitude","type":"double *","comment":null}],"argline":"const struct turtle_projection *projection, double x, double y, double *latitude, double *longitude","sig":"const struct turtle_projection *::double::double::double *::double *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Unfold a geographic projection to recover the geodetic coordinates.</p>\n","comments":"<p>Unfold a geographic projection to recover the initial geodetic coordinates. See <code>turtle_projection_project</code> for the direct transform.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_ADDRESS       The projection is `NULL`.\n\nTURTLE_RETURN_BAD_PROJECTION    The provided projection isn&#39;t supported.\n</code></pre>\n","group":"projection"},"turtle_map_create":{"type":"function","file":"turtle.h","line":364,"lineto":366,"args":[{"name":"projection","type":"const char *","comment":"The name of the projection or <code>NULL</code>.\n"},{"name":"box","type":"const struct turtle_box *","comment":"A bouding box for the map.\n"},{"name":"nx","type":"int","comment":"The number of nodes along the X-axis.\n"},{"name":"ny","type":"int","comment":"The number of nodes along the Y-axis.\n"},{"name":"zmin","type":"double","comment":"The minimum elevation value.\n"},{"name":"zmax","type":"double","comment":"The maximum elevation value.\n"},{"name":"bit_depth","type":"int","comment":"The number of bits for storing elevation values.\n"},{"name":"map","type":"struct turtle_map **","comment":"A handle to the map.\n"}],"argline":"const char *projection, const struct turtle_box *box, int nx, int ny, double zmin, double zmax, int bit_depth, struct turtle_map **map","sig":"const char *::const struct turtle_box *::int::int::double::double::int::struct turtle_map **","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Create a new projection map.</p>\n","comments":"<p>Allocate memory for a new projection map and initialise it. Use <code>turtle_map_destroy</code> in order to recover the allocated memory. The map is initialised as flat with <code>nx x ny</code> static nodes of elevation <code>zmin</code>. The nodes are distributed over a regular grid defined by <code>box</code>. The elevation values are stored over <code>bit_depth</code> bits between <code>zmin</code> and <code>zmax</code>. If <code>projection</code> is not <code>NULL</code> the map is initialised with a geographic projection handle. See <code>turtle_projection_create</code> for a list of valid projections and their names.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_PROJECTION    An invalid projection was provided.\n\nTURTLE_RETURN_DOMAIN_ERROR      An input parameter is out of its validity range.\n\nTURTLE_RETURN_MEMORY_ERROR      The map couldn&#39;t be allocated.\n</code></pre>\n","group":"map"},"turtle_map_destroy":{"type":"function","file":"turtle.h","line":376,"lineto":376,"args":[{"name":"map","type":"struct turtle_map **","comment":"A handle to the map.\n"}],"argline":"struct turtle_map **map","sig":"struct turtle_map **","return":{"type":"void","comment":null},"description":"<p>Destroy a projection map.</p>\n","comments":"<p>Fully destroy a projection map and recover the memory previously allocated by <code>turtle_projection_create</code>. On return <code>map</code> is set to <code>NULL</code>.</p>\n","group":"map"},"turtle_map_load":{"type":"function","file":"turtle.h","line":406,"lineto":407,"args":[{"name":"path","type":"const char *","comment":"The path to the map file.\n"},{"name":"box","type":"const struct turtle_box *","comment":"A bouding box for the map or <code>NULL</code>.\n"},{"name":"map","type":"struct turtle_map **","comment":"A handle to the map.\n"}],"argline":"const char *path, const struct turtle_box *box, struct turtle_map **map","sig":"const char *::const struct turtle_box *::struct turtle_map **","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Load a projection map.</p>\n","comments":"<p>Load a projection map from a file. The file format is guessed from the filename&#39;s extension. Currently only a custom <code>.png</code> format is supported. A bouding <code>box</code> can be provided in order to load only a rectangular subset of the initial map. The bounding box coordinates must be specified in the initial map frame.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_EXTENSION    The file format is not supported.\n\nTURTLE_RETURN_BAD_PATH         The file wasn&#39;t found.\n\nTURTLE_RETURN_DOMAIN_ERROR     The bouding box is invalid.\n\nTURTLE_RETURN_MEMORY_ERROR     The map couldn&#39;t be allocated.\n\nTURTLE_RETURN_JSON_ERROR       The JSON metadata are invalid (.png file).\n</code></pre>\n","group":"map"},"turtle_map_dump":{"type":"function","file":"turtle.h","line":432,"lineto":433,"args":[{"name":"map","type":"const struct turtle_map *","comment":"A handle to the map.\n"},{"name":"path","type":"const char *","comment":"The path for the output file.\n"}],"argline":"const struct turtle_map *map, const char *path","sig":"const struct turtle_map *::const char *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Dump a projection map to a file.</p>\n","comments":"<p>Dump a projection map to a file. The file format is guessed from the output filename&#39;s extension. Currently only a custom <code>.png</code> format is supported.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_EXTENSION    The file format is not supported.\n\nTURTLE_RETURN_BAD_FORMAT       The map cannot be dumped in the given format, e.g. 16 bit.\n\nTURTLE_RETURN_BAD_PATH         The file couldn&#39;t be opened.\n\nTURTLE_RETURN_MEMORY_ERROR     Some temporary memory couldn&#39;t be allocated.\n</code></pre>\n","group":"map"},"turtle_map_fill":{"type":"function","file":"turtle.h","line":455,"lineto":456,"args":[{"name":"map","type":"struct turtle_map *","comment":"A handle to the map.\n"},{"name":"ix","type":"int","comment":"The node X-coordinate.\n"},{"name":"iy","type":"int","comment":"The node Y-coordinate.\n"},{"name":"elevation","type":"double","comment":"The elevation value to set.\n"}],"argline":"struct turtle_map *map, int ix, int iy, double elevation","sig":"struct turtle_map *::int::int::double","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Fill the elevation value of a map node.</p>\n","comments":"<p>Fill the elevation value of the map node of coordinates <code>(ix, iy)</code>. The elevation value must be in the range <code>[zmin, zmax]</code> of the <code>map</code>. <strong>Note</strong> that depending on the map&#39;s <code>bit_depth</code> the actual node elevation can differ from the input value by <code>(zmax-zmin)/(2**(bit_depth)-1)</code>, e.g 1.5 cm for a 1 km altitude span and a 16 bit resolution.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_DOMAIN_ERROR    Some input parameter isn&#39;t valid.\n</code></pre>\n","group":"map"},"turtle_map_node":{"type":"function","file":"turtle.h","line":473,"lineto":474,"args":[{"name":"map","type":"struct turtle_map *","comment":"A handle to the map.\n"},{"name":"ix","type":"int","comment":"The node X-coordinate.\n"},{"name":"iy","type":"int","comment":"The node Y-coordinate.\n"},{"name":"x","type":"double *","comment":"The node geographic X-coordinate.\n"},{"name":"y","type":"double *","comment":"The node geographic Y-coordinate.\n"},{"name":"elevation","type":"double *","comment":"The node elevation value.\n"}],"argline":"struct turtle_map *map, int ix, int iy, double *x, double *y, double *elevation","sig":"struct turtle_map *::int::int::double *::double *::double *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise\n <code>TURTLE_RETURN_DOMAIN_ERROR</code> if any input parameter isn&#39;t valid.\n"},"description":"<p>Get the properties of a map node.</p>\n","comments":"<p>Get the properties of a map node, i.e. its geographic coordinates and elevation value.</p>\n","group":"map"},"turtle_map_elevation":{"type":"function","file":"turtle.h","line":494,"lineto":495,"args":[{"name":"map","type":"const struct turtle_map *","comment":"A handle to the map.\n"},{"name":"x","type":"double","comment":"The geographic X-coordinate.\n"},{"name":"y","type":"double","comment":"The geographic Y-coordinate.\n"},{"name":"elevation","type":"double *","comment":"The elevation value.\n"}],"argline":"const struct turtle_map *map, double x, double y, double *elevation","sig":"const struct turtle_map *::double::double::double *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the map elevation at a geographic coordinate.</p>\n","comments":"<p>Compute an estimate of the map elevation at the given geographic coordinates. The elevation is linearly interpolated using the 4 nodes that surround the given coordinate.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_DOMAIN_ERROR    The coordinates are not valid.\n</code></pre>\n","group":"map"},"turtle_map_projection":{"type":"function","file":"turtle.h","line":506,"lineto":506,"args":[{"name":"map","type":"struct turtle_map *","comment":"A handle to the map.\n"}],"argline":"struct turtle_map *map","sig":"struct turtle_map *","return":{"type":"struct turtle_projection *","comment":"A handle to the map&#39;s projection or <code>NULL</code> if the map is <code>NULL</code>.\n"},"description":"<p>Get a handle to the map&#39;s projection.</p>\n","comments":"<p><strong>Note</strong> The provided projection handle allows to set and modify the map&#39;s projection, e.g. using <code>turtle_projection_configure</code>.</p>\n","group":"map"},"turtle_map_info":{"type":"function","file":"turtle.h","line":522,"lineto":523,"args":[{"name":"map","type":"const struct turtle_map *","comment":"A handle to the map.\n"},{"name":"box","type":"struct turtle_box *","comment":"The map bounding box in X-Y.\n"},{"name":"nx","type":"int *","comment":"The number of nodes along the X-axis.\n"},{"name":"ny","type":"int *","comment":"The number of nodes along the Y-axis.\n"},{"name":"zmin","type":"double *","comment":"The minimum allowed elevation value.\n"},{"name":"zmax","type":"double *","comment":"The maximum allowed elevation value.\n"},{"name":"bit_depth","type":"int *","comment":"The number of bits for storing elevation values.\n"}],"argline":"const struct turtle_map *map, struct turtle_box *box, int *nx, int *ny, double *zmin, double *zmax, int *bit_depth","sig":"const struct turtle_map *::struct turtle_box *::int *::int *::double *::double *::int *","return":{"type":"void","comment":null},"description":"<p>Get basic information on a projection map.</p>\n","comments":"<p>Get some basic information on a projection map. Note that any output parameter can be set to NULL if the corresponding property is not needed.</p>\n","group":"map"},"turtle_datum_create":{"type":"function","file":"turtle.h","line":563,"lineto":565,"args":[{"name":"path","type":"const char *","comment":"The path where elevation data are stored.\n"},{"name":"stack_size","type":"int","comment":"The number of elevation data tiles kept in memory.\n"},{"name":"lock","type":"turtle_datum_cb *","comment":"A callback for locking critical sections, or <code>NULL</code>.\n"},{"name":"unlock","type":"turtle_datum_cb *","comment":"A callback for unlocking critical sections, or <code>NULL</code>.\n"},{"name":"datum","type":"struct turtle_datum **","comment":"A handle to the datum.\n"}],"argline":"const char *path, int stack_size, turtle_datum_cb *lock, turtle_datum_cb *unlock, struct turtle_datum **datum","sig":"const char *::int::turtle_datum_cb *::turtle_datum_cb *::struct turtle_datum **","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Create a new geodetic datum.</p>\n","comments":"<p>Allocate memory for a new geodetic datum and initialise it. Use <code>turtle_datum_destroy</code> in order to recover any memory allocated subsequently. The datum is initialised with an empty stack. The name of the path folder encodes the data source as detailed below. It doesn&#39;t need to actually store elevation data, e.g. if only geographic transforms are needed.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>For multithreaded access to elevation data, using a <code>turtle_client</code> one must provide both a <code>lock</code> and <code>unlock</code> callback, e.g. based on <code>sem_wait</code> and <code>sem_post</code>. Otherwise they can be both set to <code>NULL</code>. Note that setting only one to not <code>NULL</code> raises a <code>TURTLE_RETURN_BAD_FORMAT</code> error.</p>\n\n<p><strong>Supported sources</strong></p>\n\n<pre><code>ASTGTM2    ASTER-GDEM2 data, e.g. from http://reverb.echo.nasa.gov/reverb.\n</code></pre>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_ADDRESS     The lock and unlock callbacks are inconsistent.\n\nTURTLE_RETURN_BAD_FORMAT      The format of the elevation data is not supported.\n\nTURTLE_RETURN_MEMORY_ERROR    The datum couldn&#39;t be allocated.\n</code></pre>\n","group":"datum"},"turtle_datum_destroy":{"type":"function","file":"turtle.h","line":580,"lineto":580,"args":[{"name":"datum","type":"struct turtle_datum **","comment":"A handle to the datum.\n"}],"argline":"struct turtle_datum **datum","sig":"struct turtle_datum **","return":{"type":"void","comment":null},"description":"<p>Destroy a gedodetic datum.</p>\n","comments":"<p>Fully destroy a datum and all its allocated elevation data. On return <code>datum</code> is set to <code>NULL</code>.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This method is not thread safe. All clients should have been destroyed or disabled first.</p>\n","group":"datum"},"turtle_datum_clear":{"type":"function","file":"turtle.h","line":598,"lineto":598,"args":[{"name":"datum","type":"struct turtle_datum *","comment":"A handle to the datum.\n"}],"argline":"struct turtle_datum *datum","sig":"struct turtle_datum *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Clear the stack of elevation data.</p>\n","comments":"<p>Clear the stack from any elevation data not currently reserved by a <code>turtle_client</code>.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_LOCK_ERROR      The lock couldn&#39;t be acquired.\n\nTURTLE_RETURN_UNLOCK_ERROR    The lock couldn&#39;t be released.\n</code></pre>\n","group":"datum"},"turtle_datum_elevation":{"type":"function","file":"turtle.h","line":622,"lineto":623,"args":[{"name":"datum","type":"struct turtle_datum *","comment":"A handle to the datum.\n"},{"name":"latitude","type":"double","comment":"The geodetic latitude.\n"},{"name":"longitude","type":"double","comment":"The geodetic longitude.\n"},{"name":"elevation","type":"double *","comment":"The estimated elevation.\n"}],"argline":"struct turtle_datum *datum, double latitude, double longitude, double *elevation","sig":"struct turtle_datum *::double::double::double *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the elevation at geodetic coordinates.</p>\n","comments":"<p>Compute an estimate of the elevation at the given geodetic coordinates. The elevation is linearly interpolated using the 4 nodes that surround the given coordinate.</p>\n\n<p><strong>Warnings</strong> this function is not thread safe. A <code>turtle_client</code> must be used instead for concurrent accesses to the datum elevation data.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_PATH    The required elevation data are not in the datum&#39;s path.\n</code></pre>\n","group":"datum"},"turtle_datum_ecef":{"type":"function","file":"turtle.h","line":643,"lineto":644,"args":[{"name":"datum","type":"struct turtle_datum *","comment":"A handle to the datum.\n"},{"name":"latitude","type":"double","comment":"The geodetic latitude.\n"},{"name":"longitude","type":"double","comment":"The geodetic longitude.\n"},{"name":"elevation","type":"double","comment":"The geodetic elevation.\n"},{"name":"ecef","type":"double [3]","comment":"The corresponding ECEF coordinates.\n"}],"argline":"struct turtle_datum *datum, double latitude, double longitude, double elevation, double [3] ecef","sig":"struct turtle_datum *::double::double::double::double [3]","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Transform geodetic coordinates to cartesian ECEF ones.</p>\n","comments":"<p>Transform geodetic coordinates to Cartesian ones in the Earth-Centered, Earth-Fixed (ECEF) frame.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_FORMAT   The data source is not supported.\n</code></pre>\n","group":"datum"},"turtle_datum_geodetic":{"type":"function","file":"turtle.h","line":665,"lineto":667,"args":[{"name":"datum","type":"struct turtle_datum *","comment":"A handle to the datum.\n"},{"name":"ecef","type":"double [3]","comment":"The ECEF coordinates.\n"},{"name":"latitude","type":"double *","comment":"The corresponding geodetic latitude.\n"},{"name":"longitude","type":"double *","comment":"The corresponding geodetic longitude.\n"},{"name":"elevation","type":"double *","comment":"The corresponding geodetic elevation.\n"}],"argline":"struct turtle_datum *datum, double [3] ecef, double *latitude, double *longitude, double *elevation","sig":"struct turtle_datum *::double [3]::double *::double *::double *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Transform cartesian ECEF coordinates to geodetic ones.</p>\n","comments":"<p>Transform Cartesian coordinates in the Earth-Centered, Earth-Fixed (ECEF) frame to geodetic ones. B. R. Bowring&#39;s (1985) algorithm&#39;s is used with a single iteration.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_FORMAT   The data source is not supported.\n</code></pre>\n","group":"datum"},"turtle_datum_direction":{"type":"function","file":"turtle.h","line":688,"lineto":690,"args":[{"name":"datum","type":"struct turtle_datum *","comment":"A handle to the datum.\n"},{"name":"latitude","type":"double","comment":"The geodetic latitude.\n"},{"name":"longitude","type":"double","comment":"The geodetic longitude.\n"},{"name":"azimuth","type":"double","comment":"The geographic azimuth angle.\n"},{"name":"elevation","type":"double","comment":"The geographic elevation angle.\n"},{"name":"direction","type":"double [3]","comment":"The corresponding direction in ECEF coordinates.\n"}],"argline":"struct turtle_datum *datum, double latitude, double longitude, double azimuth, double elevation, double [3] direction","sig":"struct turtle_datum *::double::double::double::double::double [3]","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Transform horizontal coorrdinates to a cartesian direction in ECEF.</p>\n","comments":"<p>Transform horizontal coordinates to a Cartesian direction in the Earth-Centered, Earth-Fixed (ECEF) frame.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_FORMAT   The data source is not supported.\n</code></pre>\n","group":"datum"},"turtle_datum_horizontal":{"type":"function","file":"turtle.h","line":713,"lineto":715,"args":[{"name":"datum","type":"struct turtle_datum *","comment":"A handle to the datum.\n"},{"name":"latitude","type":"double","comment":"The geodetic latitude.\n"},{"name":"longitude","type":"double","comment":"The geodetic longitude.\n"},{"name":"direction","type":"double [3]","comment":"The direction vector in ECEF coordinates.\n"},{"name":"azimuth","type":"double *","comment":"The corresponding geographic azimuth.\n"},{"name":"elevation","type":"double *","comment":"The corresponding geographic elevation.\n"}],"argline":"struct turtle_datum *datum, double latitude, double longitude, double [3] direction, double *azimuth, double *elevation","sig":"struct turtle_datum *::double::double::double [3]::double *::double *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Transform a cartesian direction in ECEF to horizontal coorrdinates.</p>\n","comments":"<p>Transform a Cartesian direction vector in the Earth-Centered, Earth-Fixed (ECEF) frame to horizontal coordinates.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_FORMAT     The data source is not supported.\n\nTURTLE_RETURN_DOMAIN_ERROR   The direction has a null norm.\n</code></pre>\n","group":"datum"},"turtle_client_create":{"type":"function","file":"turtle.h","line":738,"lineto":739,"args":[{"name":"datum","type":"struct turtle_datum *","comment":"The master geodetic datum.\n"},{"name":"client","type":"struct turtle_client **","comment":"A handle to the client.\n"}],"argline":"struct turtle_datum *datum, struct turtle_client **client","sig":"struct turtle_datum *::struct turtle_client **","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Create a new client for a geodetic datum.</p>\n","comments":"<p>Allocate memory for a new client for a thread safe access to the elevation data of a geodetic datum. The client is initialised as iddle. Whenever a new elevation value is requested it will book the needed data to its master <code>turtle_datum</code> and release any left over ones. Use <code>turtle_client_clear</code>in order to force the release of any reserved data or <code>turtle_client_destroy</code> in order to fully recover the client&#39;s memory.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_ADDRESS     The datum is not valid, e.g. has no lock.\n\nTURTLE_RETURN_MEMORY_ERROR    The client couldn&#39;t be allocated.\n</code></pre>\n","group":"client"},"turtle_client_destroy":{"type":"function","file":"turtle.h","line":757,"lineto":757,"args":[{"name":"client","type":"struct turtle_client **","comment":"A handle to the client.\n"}],"argline":"struct turtle_client **client","sig":"struct turtle_client **","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Create a new client for a geodetic datum.</p>\n","comments":"<p>Attempts to destroy a datum client. Any reserved elevation data are first freed. On a successfull return <code>client</code> is set to <code>NULL</code>.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_LOCK_ERROR      The lock couldn&#39;t be acquired.\n\nTURTLE_RETURN_UNLOCK_ERROR    The lock couldn&#39;t be released.\n</code></pre>\n","group":"client"},"turtle_client_clear":{"type":"function","file":"turtle.h","line":775,"lineto":775,"args":[{"name":"client","type":"struct turtle_client *","comment":"A handle to the client.\n"}],"argline":"struct turtle_client *client","sig":"struct turtle_client *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Unbook any reserved elevation data.</p>\n","comments":"<p>Notify the master datum that any previously reserved elevation data is no more needed.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_LOCK_ERROR      The lock couldn&#39;t be acquired.\n\nTURTLE_RETURN_UNLOCK_ERROR    The lock couldn&#39;t be released.\n</code></pre>\n","group":"client"},"turtle_client_elevation":{"type":"function","file":"turtle.h","line":800,"lineto":801,"args":[{"name":"client","type":"struct turtle_client *","comment":null},{"name":"latitude","type":"double","comment":"The geodetic latitude.\n"},{"name":"longitude","type":"double","comment":"The geodetic longitude.\n"},{"name":"elevation","type":"double *","comment":"The estimated elevation.\n"}],"argline":"struct turtle_client *client, double latitude, double longitude, double *elevation","sig":"struct turtle_client *::double::double::double *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Thread safe access to the elevation data of a geodetic datum.</p>\n","comments":"<p>Compute an estimate of the elevation at the given geodetic coordinates. The elevation is linearly interpolated using the 4 nodes that surround the given coordinate.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_PATH        The required elevation data are not in the datum&#39;s path.\n\nTURTLE_RETURN_LOCK_ERROR      The lock couldn&#39;t be acquired.\n\nTURTLE_RETURN_UNLOCK_ERROR    The lock couldn&#39;t be released.\n</code></pre>\n","group":"client"}},"callbacks":{"turtle_caller_t":{"type":"callback","file":"turtle.h","line":97,"lineto":97,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Generic function pointer.</p>\n","comments":"<p>This is a generic function pointer used to identify the library functions, e.g. for error handling.</p>\n"},"turtle_handler_cb":{"type":"callback","file":"turtle.h","line":112,"lineto":112,"args":[{"name":"rc","type":"enum turtle_return","comment":"The TURTLE return code.\n"},{"name":"caller","type":"turtle_caller_t *","comment":"The caller function where the error occured.\n"}],"argline":"enum turtle_return rc, turtle_caller_t *caller","sig":"enum turtle_return::turtle_caller_t *","return":{"type":"void","comment":null},"description":"<p>Callback for error handling.</p>\n","comments":"<p>The user might provide its own error handler. It will be called at the return of any TURTLE library function providing an error code.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This callback <em>must</em> be thread safe if a <code>turtle_client</code> is used.</p>\n"},"turtle_datum_cb":{"type":"callback","file":"turtle.h","line":127,"lineto":127,"args":[],"argline":"","sig":"","return":{"type":"int","comment":"<code>0</code> on success, any other value otherwise.\n"},"description":"<p>Callback for locking or unlocking critical sections.</p>\n","comments":"<p>For multhithreaded applications with a <code>turtle_datum</code> and <code>turtle_client</code>s the user must supply a <code>lock</code> and <code>unlock</code> callback providing exclusive access to critical sections, e.g. using a semaphore.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>The callback <em>must</em> return <code>0</code> if the (un)lock was successfull.</p>\n"}},"globals":{},"types":[["turtle_box",{"decl":["double x0","double y0","double half_x","double half_y"],"type":"struct","value":"turtle_box","file":"turtle.h","line":80,"lineto":89,"block":"double x0\ndouble y0\ndouble half_x\ndouble half_y","tdef":null,"description":" Bounding box for projection maps.","comments":"","fields":[{"type":"double","name":"x0","comments":"Origin&#39;s X coordinate. \n"},{"type":"double","name":"y0","comments":"Origin&#39;s Y coordinate. \n"},{"type":"double","name":"half_x","comments":"Half width along the X-axis. \n"},{"type":"double","name":"half_y","comments":"Half width along the Y-axis. \n"}],"used":{"returns":[],"needs":["turtle_map_create","turtle_map_info","turtle_map_load"]}}],["turtle_client",{"decl":[],"type":"struct","value":"turtle_client","file":"turtle.h","line":75,"lineto":75,"tdef":null,"description":" Handle to a datum client for multithreaded access to elevation data.","comments":"","fields":[],"used":{"returns":[],"needs":["turtle_client_clear","turtle_client_create","turtle_client_destroy","turtle_client_elevation"]}}],["turtle_datum",{"decl":[],"type":"struct","value":"turtle_datum","file":"turtle.h","line":70,"lineto":70,"tdef":null,"description":" Handle for a geodetic datum for worldwide elevation data.","comments":"","fields":[],"used":{"returns":[],"needs":["turtle_client_create","turtle_datum_clear","turtle_datum_create","turtle_datum_destroy","turtle_datum_direction","turtle_datum_ecef","turtle_datum_elevation","turtle_datum_geodetic","turtle_datum_horizontal"]}}],["turtle_map",{"decl":[],"type":"struct","value":"turtle_map","file":"turtle.h","line":65,"lineto":65,"tdef":null,"description":" Handle for a projection map of the elevation.","comments":"","fields":[],"used":{"returns":[],"needs":["turtle_map_create","turtle_map_destroy","turtle_map_dump","turtle_map_elevation","turtle_map_fill","turtle_map_info","turtle_map_load","turtle_map_node","turtle_map_projection"]}}],["turtle_projection",{"decl":[],"type":"struct","value":"turtle_projection","file":"turtle.h","line":60,"lineto":60,"tdef":null,"description":" Handle for a geographic projection.","comments":"","fields":[],"used":{"returns":["turtle_map_projection"],"needs":["turtle_projection_configure","turtle_projection_create","turtle_projection_destroy","turtle_projection_info","turtle_projection_project","turtle_projection_unproject"]}}],["turtle_return",{"decl":["TURTLE_RETURN_SUCCESS","TURTLE_RETURN_BAD_ADDRESS","TURTLE_RETURN_BAD_EXTENSION","TURTLE_RETURN_BAD_FORMAT","TURTLE_RETURN_BAD_PROJECTION","TURTLE_RETURN_BAD_JSON","TURTLE_RETURN_DOMAIN_ERROR","TURTLE_RETURN_LIBRARY_ERROR","TURTLE_RETURN_LOCK_ERROR","TURTLE_RETURN_MEMORY_ERROR","TURTLE_RETURN_PATH_ERROR","TURTLE_RETURN_UNLOCK_ERROR","N_TURTLE_RETURNS"],"type":"enum","file":"turtle.h","line":28,"lineto":55,"block":"TURTLE_RETURN_SUCCESS\nTURTLE_RETURN_BAD_ADDRESS\nTURTLE_RETURN_BAD_EXTENSION\nTURTLE_RETURN_BAD_FORMAT\nTURTLE_RETURN_BAD_PROJECTION\nTURTLE_RETURN_BAD_JSON\nTURTLE_RETURN_DOMAIN_ERROR\nTURTLE_RETURN_LIBRARY_ERROR\nTURTLE_RETURN_LOCK_ERROR\nTURTLE_RETURN_MEMORY_ERROR\nTURTLE_RETURN_PATH_ERROR\nTURTLE_RETURN_UNLOCK_ERROR\nN_TURTLE_RETURNS","tdef":null,"description":" Return Codes used by TURTLE.","comments":"","fields":[{"type":"int","name":"TURTLE_RETURN_SUCCESS","comments":"<p>The operation succeeded. </p>\n","value":0},{"type":"int","name":"TURTLE_RETURN_BAD_ADDRESS","comments":"<p>A wrong pointer address was provided, e.g. NULL. </p>\n","value":1},{"type":"int","name":"TURTLE_RETURN_BAD_EXTENSION","comments":"<p>A provided file extension is not supported or recognised. </p>\n","value":2},{"type":"int","name":"TURTLE_RETURN_BAD_FORMAT","comments":"<p>A provided file or string has a wrong format. </p>\n","value":3},{"type":"int","name":"TURTLE_RETURN_BAD_PROJECTION","comments":"<p>A provided <code>turtle_projection</code> is not supported. </p>\n","value":4},{"type":"int","name":"TURTLE_RETURN_BAD_JSON","comments":"<p>Some JSON metadata couldn&#39;t be understood. </p>\n","value":5},{"type":"int","name":"TURTLE_RETURN_DOMAIN_ERROR","comments":"<p>Some input parameters are out of their validity range. </p>\n","value":6},{"type":"int","name":"TURTLE_RETURN_LIBRARY_ERROR","comments":"<p>An TURTLE low level library error occured. </p>\n","value":7},{"type":"int","name":"TURTLE_RETURN_LOCK_ERROR","comments":"<p>A lock couldn&#39;t be acquired. </p>\n","value":8},{"type":"int","name":"TURTLE_RETURN_MEMORY_ERROR","comments":"<p>Some meory couldn&#39;t be allocated. </p>\n","value":9},{"type":"int","name":"TURTLE_RETURN_PATH_ERROR","comments":"<p>A provided path wasn&#39;t found. </p>\n","value":10},{"type":"int","name":"TURTLE_RETURN_UNLOCK_ERROR","comments":"<p>A lock couldn&#39;t be released. </p>\n","value":11},{"type":"int","name":"N_TURTLE_RETURNS","comments":"<p>The number of TURTLE error codes. </p>\n","value":12}],"used":{"returns":["turtle_client_clear","turtle_client_create","turtle_client_destroy","turtle_client_elevation","turtle_datum_clear","turtle_datum_create","turtle_datum_direction","turtle_datum_ecef","turtle_datum_elevation","turtle_datum_geodetic","turtle_datum_horizontal","turtle_map_create","turtle_map_dump","turtle_map_elevation","turtle_map_fill","turtle_map_load","turtle_map_node","turtle_projection_configure","turtle_projection_create","turtle_projection_info","turtle_projection_project","turtle_projection_unproject"],"needs":["turtle_handler_cb","turtle_strerror"]}}]],"prefix":"include","groups":[["client",["turtle_client_clear","turtle_client_create","turtle_client_destroy","turtle_client_elevation"]],["datum",["turtle_datum_clear","turtle_datum_create","turtle_datum_destroy","turtle_datum_direction","turtle_datum_ecef","turtle_datum_elevation","turtle_datum_geodetic","turtle_datum_horizontal"]],["map",["turtle_map_create","turtle_map_destroy","turtle_map_dump","turtle_map_elevation","turtle_map_fill","turtle_map_info","turtle_map_load","turtle_map_node","turtle_map_projection"]],["projection",["turtle_projection_configure","turtle_projection_create","turtle_projection_destroy","turtle_projection_info","turtle_projection_project","turtle_projection_unproject"]],["turtle",["turtle_finalise","turtle_handler","turtle_initialise","turtle_strerror","turtle_strfunc"]]]}