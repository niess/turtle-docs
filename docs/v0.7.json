{"files":[{"file":"turtle.h","functions":["turtle_function_t","turtle_error_handler_t","turtle_stack_locker_t","turtle_error_function","turtle_error_handler_get","turtle_error_handler_set","turtle_projection_create","turtle_projection_destroy","turtle_projection_configure","turtle_projection_name","turtle_projection_project","turtle_projection_unproject","turtle_map_create","turtle_map_destroy","turtle_map_load","turtle_map_dump","turtle_map_fill","turtle_map_node","turtle_map_elevation","turtle_map_projection","turtle_map_meta","turtle_ecef_from_geodetic","turtle_ecef_to_geodetic","turtle_ecef_from_horizontal","turtle_ecef_to_horizontal","turtle_stack_create","turtle_stack_destroy","turtle_stack_clear","turtle_stack_load","turtle_stack_elevation","turtle_client_create","turtle_client_destroy","turtle_client_clear","turtle_client_elevation","turtle_stepper_create","turtle_stepper_destroy","turtle_stepper_geoid_set","turtle_stepper_geoid_get","turtle_stepper_range_set","turtle_stepper_range_get","turtle_stepper_slope_get","turtle_stepper_slope_set","turtle_stepper_resolution_get","turtle_stepper_resolution_set","turtle_stepper_add_layer","turtle_stepper_add_stack","turtle_stepper_add_map","turtle_stepper_add_flat","turtle_stepper_step","turtle_stepper_position"],"meta":{},"lines":1085}],"functions":{"turtle_error_function":{"type":"function","file":"turtle.h","line":157,"lineto":157,"args":[{"name":"function","type":"turtle_function_t *","comment":null}],"argline":"turtle_function_t *function","sig":"turtle_function_t *","return":{"type":"const char *","comment":null},"description":"<p>Return a string describing a TURTLE library function</p>\n","comments":"<p class=\"longComment\">This function is meant for verbosing when handling errors. It is thread safe.</p>\n","group":"error"},"turtle_error_handler_get":{"type":"function","file":"turtle.h","line":172,"lineto":172,"args":[],"argline":"","sig":"","return":{"type":"turtle_error_handler_t *","comment":"The current error handler\n"},"description":"<p>Get the library error handler</p>\n","comments":"<p class=\"longComment\">This function allows to set or alter the error handler. Only one error handler can be set at a time for all threads. It is not thread safe to modify it. By default errors are printed to <code>stderr</code> and a hard exit occurs.</p>\n\n<p class=\"longComment\"><strong>Note</strong> : providing a <code>NULL</code> error handler disables error handling. Nevertheless, the TURTLE library functions will still return and error code.</p>\n","group":"error"},"turtle_error_handler_set":{"type":"function","file":"turtle.h","line":194,"lineto":194,"args":[{"name":"handler","type":"turtle_error_handler_t *","comment":"The user supplied error handler\n"}],"argline":"turtle_error_handler_t *handler","sig":"turtle_error_handler_t *","return":{"type":"void","comment":null},"description":"<p>Set the library error handler</p>\n","comments":"<p class=\"longComment\">This function allows to set or alter the error handler. Only one error handler can be set at a time for all threads. It is not thread safe to modify it. By default errors are printed to <code>stderr</code> and a hard exit occurs.</p>\n\n<p class=\"longComment\">Note that providing a <code>NULL</code> error handler disables error handling. Nevertheless, the TURTLE library functions will still return and error code.</p>\n\n<p class=\"longComment\">Note also that this function can be called before the library initialisation.</p>\n\n<p class=\"longComment\"><strong>Warnings</strong></p>\n\n<p class=\"longComment\">This function is not thread safe.</p>\n","group":"error"},"turtle_projection_create":{"type":"function","file":"turtle.h","line":235,"lineto":236,"args":[{"name":"projection","type":"struct turtle_projection **","comment":"The projection object\n"},{"name":"name","type":"const char *","comment":"The name tag of the projection\n"}],"argline":"struct turtle_projection **projection, const char *name","sig":"struct turtle_projection **::const char *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Create a new geographic projection</p>\n","comments":"<p class=\"longComment\">The currently supported projections are <strong>Lambert</strong> and <strong>UTM</strong>. The <em>name</em> tag encodes the projection parameters. It must be one of the followings:</p>\n\n<pre><code>* Lambert I\n\n* Lambert II\n\n* Lambert IIe    (for Lambert II extended)\n\n* Lambert III\n\n* Lambert IV\n\n* Lambert 93     (conforming to RGF93)\n\n* UTM {zone}{hemisphere}\n\n* UTM {longitude}{hemisphere}\n</code></pre>\n\n<p class=\"longComment\">where {zone} is an integer in [1, 60] encoding the UTM world zone and hemisphere must be <code>N</code> for north or <code>S</code> for south, e.g. <code>UTM 31N</code> for the centre of France. Alternatively the central longitude of the UTM projection can be provided directly as an explicit floating number, e.g. <code>UTM 3.0N</code> for the UTM zone 31N as previously.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_PROJECTION    The name tag isn&#39;t valid\n\nTURTLE_RETURN_MEMORY_ERROR      The projection could not be allocated\n</code></pre>\n","group":"projection"},"turtle_projection_destroy":{"type":"function","file":"turtle.h","line":252,"lineto":253,"args":[{"name":"projection","type":"struct turtle_projection **","comment":"The projection object\n"}],"argline":"struct turtle_projection **projection","sig":"struct turtle_projection **","return":{"type":"void","comment":null},"description":"<p>Destroy a geographic projection</p>\n","comments":"<p class=\"longComment\">Fully destroy a geographic projection previously allocated with <a href=\"./#v0.7/group/projection/turtle_projection_create\">turtle_projection_create</a>. On return <code>projection</code> is set to <code>NULL</code>.</p>\n\n<p class=\"longComment\"><strong>Warnings</strong></p>\n\n<p class=\"longComment\">This must <strong>not</strong> be called on a projection object returned by a <a href=\"./#v0.7/type/turtle_map\">turtle_map</a>. Instead one must call <a href=\"./#v0.7/group/map/turtle_map_destroy\">turtle_map_destroy</a> to get rid of both the map and its projection.</p>\n","group":"projection"},"turtle_projection_configure":{"type":"function","file":"turtle.h","line":270,"lineto":271,"args":[{"name":"projection","type":"struct turtle_projection *","comment":"The projection object\n"},{"name":"name","type":"const char *","comment":"The name tag of the projection\n"}],"argline":"struct turtle_projection *projection, const char *name","sig":"struct turtle_projection *::const char *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>(Re-)configure a geographic projection</p>\n","comments":"<p class=\"longComment\">See <a href=\"./#v0.7/group/projection/turtle_projection_create\">turtle_projection_create</a> for the supported projections and valid values for the <code>name</code> parameter.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_PROJECTION    The projection isn&#39;t supported\n</code></pre>\n","group":"projection"},"turtle_projection_name":{"type":"function","file":"turtle.h","line":284,"lineto":285,"args":[{"name":"projection","type":"const struct turtle_projection *","comment":"The projection object\n"}],"argline":"const struct turtle_projection *projection","sig":"const struct turtle_projection *","return":{"type":"const char *","comment":"The projection name tag or <code>Ç¸ULL</code>\n"},"description":"<p>Get the name tag of a geographic projection</p>\n","comments":"<p class=\"longComment\">This function returns a <code>name</code> tag encoding the projection details. The resulting name conforms to the inputs to <a href=\"./#v0.7/group/projection/turtle_projection_configure\">turtle_projection_configure</a> or <a href=\"./#v0.7/group/projection/turtle_projection_create\">turtle_projection_create</a>, e.g. <code>UTM 31N</code>. See the later for a detailed description.</p>\n","group":"projection"},"turtle_projection_project":{"type":"function","file":"turtle.h","line":307,"lineto":309,"args":[{"name":"projection","type":"const struct turtle_projection *","comment":"The projection object\n"},{"name":"latitude","type":"double","comment":"The input geodetic longitude\n"},{"name":"longitude","type":"double","comment":null},{"name":"x","type":"double *","comment":"The output X-coordinate\n"},{"name":"y","type":"double *","comment":"The output Y-coordinate\n"}],"argline":"const struct turtle_projection *projection, double latitude, double longitude, double *x, double *y","sig":"const struct turtle_projection *::double::double::double *::double *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Apply a geographic projection to geodetic coordinates</p>\n","comments":"<p class=\"longComment\">Apply the geographic projection to a set of geodetic coordinates. See <a href=\"./#v0.7/group/projection/turtle_projection_unproject\">turtle_projection_unproject</a> for the reverse transform.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_ADDRESS       The projection is `NULL`\n\nTURTLE_RETURN_BAD_PROJECTION    The projection isn&#39;t supported\n</code></pre>\n","group":"projection"},"turtle_projection_unproject":{"type":"function","file":"turtle.h","line":331,"lineto":333,"args":[{"name":"projection","type":"const struct turtle_projection *","comment":"The projection object\n"},{"name":"x","type":"double","comment":"The input X-coordinate\n"},{"name":"y","type":"double","comment":"The input Y-coordinate\n"},{"name":"latitude","type":"double *","comment":"The output geodetic longitude\n"},{"name":"longitude","type":"double *","comment":null}],"argline":"const struct turtle_projection *projection, double x, double y, double *latitude, double *longitude","sig":"const struct turtle_projection *::double::double::double *::double *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Unfold a geographic projection to recover the geodetic coordinates</p>\n","comments":"<p class=\"longComment\">Unfold a geographic projection to recover the initial geodetic coordinates. See <a href=\"./#v0.7/group/projection/turtle_projection_project\">turtle_projection_project</a> for the direct transform.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_ADDRESS       The projection is `NULL`\n\nTURTLE_RETURN_BAD_PROJECTION    The provided projection isn&#39;t supported\n</code></pre>\n","group":"projection"},"turtle_map_create":{"type":"function","file":"turtle.h","line":362,"lineto":363,"args":[{"name":"map","type":"struct turtle_map **","comment":"The map object\n"},{"name":"info","type":"const struct turtle_map_info *","comment":"The map meta data\n"},{"name":"projection","type":"const char *","comment":"A geographic projection, or <code>NULL</code>\n"}],"argline":"struct turtle_map **map, const struct turtle_map_info *info, const char *projection","sig":"struct turtle_map **::const struct turtle_map_info *::const char *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Create a new map</p>\n","comments":"<p class=\"longComment\">Allocate memory for a new map and initialise it. Use <a href=\"./#v0.7/group/map/turtle_map_destroy\">turtle_map_destroy</a> in order to recover the allocated memory. The map is initialised as flat with <code>info:nx x info:ny</code> static nodes of elevation <code>zmin</code>. The nodes are distributed over a regular grid defined by <code>info</code>. The elevation values are stored over 16 bits between <code>info:z[0]</code> and <code>info:z[1]</code>. If <code>projection</code> is not <code>NULL</code> the map is initialised with a geographic projection handle. See <a href=\"./#v0.7/group/projection/turtle_projection_create\">turtle_projection_create</a> for a list of valid projections and their names.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_PROJECTION    An invalid projection was provided\n\nTURTLE_RETURN_DOMAIN_ERROR      An input parameter is out of its validity range\n\nTURTLE_RETURN_MEMORY_ERROR      The map couldn&#39;t be allocated\n</code></pre>\n","group":"map"},"turtle_map_destroy":{"type":"function","file":"turtle.h","line":373,"lineto":373,"args":[{"name":"map","type":"struct turtle_map **","comment":"The map object\n"}],"argline":"struct turtle_map **map","sig":"struct turtle_map **","return":{"type":"void","comment":null},"description":"<p>Destroy a projection map</p>\n","comments":"<p class=\"longComment\">Fully destroy a projection map and recover the memory previously allocated by <a href=\"./#v0.7/group/projection/turtle_projection_create\">turtle_projection_create</a>. On return <code>map</code> is set to <code>NULL</code>.</p>\n","group":"map"},"turtle_map_load":{"type":"function","file":"turtle.h","line":398,"lineto":399,"args":[{"name":"map","type":"struct turtle_map **","comment":"The map object\n"},{"name":"path","type":"const char *","comment":"The path to the map file\n"}],"argline":"struct turtle_map **map, const char *path","sig":"struct turtle_map **::const char *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Load a map</p>\n","comments":"<p class=\"longComment\">Load a map from a file. The file format is guessed from the filename extension. Currently only <code>.png</code> and <code>.grd</code> (e.g. EGM96) formats are supported.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_EXTENSION    The file format is not supported\n\nTURTLE_RETURN_BAD_PATH         The file wasn&#39;t found\n\nTURTLE_RETURN_MEMORY_ERROR     The map couldn&#39;t be allocated\n\nTURTLE_RETURN_JSON_ERROR       The JSON metadata are invalid (.png file)\n</code></pre>\n","group":"map"},"turtle_map_dump":{"type":"function","file":"turtle.h","line":424,"lineto":425,"args":[{"name":"map","type":"const struct turtle_map *","comment":"The map object\n"},{"name":"path","type":"const char *","comment":"The path for the output file\n"}],"argline":"const struct turtle_map *map, const char *path","sig":"const struct turtle_map *::const char *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Dump a map to a file</p>\n","comments":"<p class=\"longComment\">Dump a projection map to a file. The file format is guessed from the output filename extension. Currently only a custom <code>.png</code> format is supported.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_EXTENSION    The file format is not supported\n\nTURTLE_RETURN_BAD_FORMAT       The map cannot be dumped in the given format, e.g. 16 bit\n\nTURTLE_RETURN_BAD_PATH         The file couldn&#39;t be opened\n\nTURTLE_RETURN_MEMORY_ERROR     Some temporary memory couldn&#39;t be allocated\n</code></pre>\n","group":"map"},"turtle_map_fill":{"type":"function","file":"turtle.h","line":446,"lineto":447,"args":[{"name":"map","type":"struct turtle_map *","comment":"The map object\n"},{"name":"ix","type":"int","comment":"The node X-coordinate\n"},{"name":"iy","type":"int","comment":"The node Y-coordinate\n"},{"name":"elevation","type":"double","comment":"The elevation value to set\n"}],"argline":"struct turtle_map *map, int ix, int iy, double elevation","sig":"struct turtle_map *::int::int::double","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Fill the elevation value of a map node</p>\n","comments":"<p class=\"longComment\">Fill the elevation value of the map node of coordinates <code>(ix, iy)</code>. The elevation value must be in the range <code>[zmin, zmax]</code> of the <code>map</code>. <strong>Note</strong> that due to digitization the actual node elevation can differ from the input value by <code>(zmax-zmin)/65535</code>, e.g 1.5 cm for a 1 km altitude span.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_DOMAIN_ERROR    Some input parameter isn&#39;t valid\n</code></pre>\n","group":"map"},"turtle_map_node":{"type":"function","file":"turtle.h","line":464,"lineto":465,"args":[{"name":"map","type":"const struct turtle_map *","comment":"The map object\n"},{"name":"ix","type":"int","comment":"The node X-coordinate\n"},{"name":"iy","type":"int","comment":"The node Y-coordinate\n"},{"name":"x","type":"double *","comment":"The node geographic X-coordinate\n"},{"name":"y","type":"double *","comment":"The node geographic Y-coordinate\n"},{"name":"elevation","type":"double *","comment":"The node elevation value\n"}],"argline":"const struct turtle_map *map, int ix, int iy, double *x, double *y, double *elevation","sig":"const struct turtle_map *::int::int::double *::double *::double *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise\n <code>TURTLE_RETURN_DOMAIN_ERROR</code> if any input parameter isn&#39;t valid\n"},"description":"<p>Get the properties of a map node</p>\n","comments":"<p class=\"longComment\">Get the properties of a map node, i.e. its geographic coordinates and elevation value.</p>\n","group":"map"},"turtle_map_elevation":{"type":"function","file":"turtle.h","line":489,"lineto":491,"args":[{"name":"map","type":"const struct turtle_map *","comment":"The map object\n"},{"name":"x","type":"double","comment":"The geographic X-coordinate\n"},{"name":"y","type":"double","comment":"The geographic Y-coordinate\n"},{"name":"elevation","type":"double *","comment":"The elevation value\n"},{"name":"inside","type":"int *","comment":"Flag for bounds check or <code>NULL</code>\n"}],"argline":"const struct turtle_map *map, double x, double y, double *elevation, int *inside","sig":"const struct turtle_map *::double::double::double *::int *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Get the map elevation at a geographic coordinate</p>\n","comments":"<p class=\"longComment\">Compute an estimate of the map elevation at the given geographic coordinates. The elevation is linearly interpolated using the 4 nodes that surround the given coordinate. Providing a non <code>NULL</code> value for <em>inside</em> allows to check if the provided coordinates are inside the map or not. <strong>Note</strong> that no bound error is raised in the latter case, when <em>inside</em> is not <code>NULL</code>.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_DOMAIN_ERROR    The coordinates are not valid\n</code></pre>\n","group":"map"},"turtle_map_projection":{"type":"function","file":"turtle.h","line":502,"lineto":503,"args":[{"name":"map","type":"const struct turtle_map *","comment":"The map object\n"}],"argline":"const struct turtle_map *map","sig":"const struct turtle_map *","return":{"type":"const struct turtle_projection *","comment":"The map projection or <code>NULL</code> if none or if the map is <code>NULL</code>\n"},"description":"<p>Get the map&#39;s projection</p>\n","comments":"<p class=\"longComment\"><strong>Note</strong> The provided projection object allows to set and modify the map&#39;s projection, e.g. using <a href=\"./#v0.7/group/projection/turtle_projection_configure\">turtle_projection_configure</a>.</p>\n","group":"map"},"turtle_map_meta":{"type":"function","file":"turtle.h","line":516,"lineto":517,"args":[{"name":"map","type":"const struct turtle_map *","comment":"The map object\n"},{"name":"info","type":"struct turtle_map_info *","comment":"A pointer to a <a href=\"./#v0.7/type/turtle_map_info\">turtle_map_info</a> structure\n"},{"name":"projection","type":"const char **","comment":"A pointer for returning the projection, or <code>NULL</code>\n"}],"argline":"const struct turtle_map *map, struct turtle_map_info *info, const char **projection","sig":"const struct turtle_map *::struct turtle_map_info *::const char **","return":{"type":"void","comment":null},"description":"<p>Get basic information on a projection map</p>\n","comments":"<p class=\"longComment\">Get some basic information on a map. The meta data are filled to the provided <em>info</em> structure. If <em>projection</em> is non <code>NULL</code> it points to the map projection at return.</p>\n","group":"map"},"turtle_ecef_from_geodetic":{"type":"function","file":"turtle.h","line":530,"lineto":531,"args":[{"name":"latitude","type":"double","comment":"The geodetic latitude\n"},{"name":"longitude","type":"double","comment":"The geodetic longitude\n"},{"name":"elevation","type":"double","comment":"The geodetic elevation\n"},{"name":"ecef","type":"double [3]","comment":"The corresponding ECEF coordinates\n"}],"argline":"double latitude, double longitude, double elevation, double [3] ecef","sig":"double::double::double::double [3]","return":{"type":"void","comment":null},"description":"<p>Transform geodetic coordinates to Cartesian ECEF ones</p>\n","comments":"<p class=\"longComment\">Transform geodetic coordinates to Cartesian ones in the Earth-Centered, Earth-Fixed (ECEF) frame.</p>\n","group":"ecef"},"turtle_ecef_to_geodetic":{"type":"function","file":"turtle.h","line":545,"lineto":546,"args":[{"name":"ecef","type":"const double [3]","comment":"The ECEF coordinates\n"},{"name":"latitude","type":"double *","comment":"The corresponding geodetic latitude\n"},{"name":"longitude","type":"double *","comment":"The corresponding geodetic longitude\n"},{"name":"altitude","type":"double *","comment":"The corresponding geodetic altitude\n"}],"argline":"const double [3] ecef, double *latitude, double *longitude, double *altitude","sig":"const double [3]::double *::double *::double *","return":{"type":"void","comment":null},"description":"<p>Transform Cartesian ECEF coordinates to geodetic ones</p>\n","comments":"<p class=\"longComment\">Transform Cartesian coordinates in the Earth-Centered, Earth-Fixed (ECEF) frame to geodetic ones. B. R. Bowring&#39;s (1985) algorithm&#39;s is used with a single iteration.</p>\n","group":"ecef"},"turtle_ecef_from_horizontal":{"type":"function","file":"turtle.h","line":560,"lineto":561,"args":[{"name":"latitude","type":"double","comment":"The geodetic latitude\n"},{"name":"longitude","type":"double","comment":"The geodetic longitude\n"},{"name":"azimuth","type":"double","comment":"The geographic azimuth angle\n"},{"name":"elevation","type":"double","comment":"The geographic elevation angle\n"},{"name":"direction","type":"double [3]","comment":"The corresponding direction in ECEF coordinates\n"}],"argline":"double latitude, double longitude, double azimuth, double elevation, double [3] direction","sig":"double::double::double::double::double [3]","return":{"type":"void","comment":null},"description":"<p>Transform horizontal angles to a Cartesian direction in ECEF</p>\n","comments":"<p class=\"longComment\">Transform horizontal coordinates to a Cartesian direction in the Earth-Centered, Earth-Fixed (ECEF) frame.</p>\n","group":"ecef"},"turtle_ecef_to_horizontal":{"type":"function","file":"turtle.h","line":575,"lineto":576,"args":[{"name":"latitude","type":"double","comment":"The geodetic latitude\n"},{"name":"longitude","type":"double","comment":"The geodetic longitude\n"},{"name":"direction","type":"const double [3]","comment":"The direction vector in ECEF coordinates\n"},{"name":"azimuth","type":"double *","comment":"The corresponding geographic azimuth\n"},{"name":"elevation","type":"double *","comment":"The corresponding geographic elevation\n"}],"argline":"double latitude, double longitude, const double [3] direction, double *azimuth, double *elevation","sig":"double::double::const double [3]::double *::double *","return":{"type":"void","comment":null},"description":"<p>Transform a Cartesian direction in ECEF to horizontal angles</p>\n","comments":"<p class=\"longComment\">Transform a Cartesian direction vector in the Earth-Centered, Earth-Fixed (ECEF) frame to horizontal coordinates.</p>\n","group":"ecef"},"turtle_stack_create":{"type":"function","file":"turtle.h","line":611,"lineto":613,"args":[{"name":"stack","type":"struct turtle_stack **","comment":"The stack object\n"},{"name":"path","type":"const char *","comment":"The path where elevation data are stored, or <code>NULL</code>.\n"},{"name":"stack_size","type":"int","comment":null},{"name":"lock","type":"turtle_stack_locker_t *","comment":"A callback for locking critical sections, or <code>NULL</code>.\n"},{"name":"unlock","type":"turtle_stack_locker_t *","comment":"A callback for unlocking critical sections, or <code>NULL</code>.\n"}],"argline":"struct turtle_stack **stack, const char *path, int stack_size, turtle_stack_locker_t *lock, turtle_stack_locker_t *unlock","sig":"struct turtle_stack **::const char *::int::turtle_stack_locker_t *::turtle_stack_locker_t *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Create a new stack of global topography data</p>\n","comments":"<p class=\"longComment\">Allocate memory for a new stack and initialise it. Use <a href=\"./#v0.7/group/stack/turtle_stack_destroy\">turtle_stack_destroy</a> in order to recover any memory allocated subsequently. The stack is initialised as empty. <strong>Note</strong> that providing a null or negative stack <em>size</em> results in all maps being kept in memory.</p>\n\n<p class=\"longComment\"><strong>Warnings</strong></p>\n\n<p class=\"longComment\">For multi-threaded access to elevation data, using a <a href=\"./#v0.7/type/turtle_client\">turtle_client</a> one must provide both a <code>lock</code> and <code>unlock</code> callback, e.g. based on <code>sem_wait</code> and <code>sem_post</code>. Otherwise they can be both set to <code>NULL</code>. Note that setting only one to not <code>NULL</code> raises a <code>TURTLE_RETURN_BAD_FORMAT</code> error.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_ADDRESS     The lock and unlock callbacks are inconsistent\n\nTURTLE_RETURN_BAD_FORMAT      The format of the elevation data is not supported\n\nTURTLE_RETURN_MEMORY_ERROR    The stack couldn&#39;t be allocated\n</code></pre>\n","group":"stack"},"turtle_stack_destroy":{"type":"function","file":"turtle.h","line":628,"lineto":628,"args":[{"name":"stack","type":"struct turtle_stack **","comment":"The stack object\n"}],"argline":"struct turtle_stack **stack","sig":"struct turtle_stack **","return":{"type":"void","comment":null},"description":"<p>Destroy a stack of global topography data</p>\n","comments":"<p class=\"longComment\">Fully destroy a stack and all its allocated elevation data. On return <code>stack</code> is set to <code>NULL</code>.</p>\n\n<p class=\"longComment\"><strong>Warnings</strong></p>\n\n<p class=\"longComment\">This method is not thread safe. All clients should have been destroyed or disabled first.</p>\n","group":"stack"},"turtle_stack_clear":{"type":"function","file":"turtle.h","line":646,"lineto":646,"args":[{"name":"stack","type":"struct turtle_stack *","comment":"The stack object\n"}],"argline":"struct turtle_stack *stack","sig":"struct turtle_stack *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Clear the stack from topography data</p>\n","comments":"<p class=\"longComment\">Clear the stack from any elevation data not currently reserved by a <a href=\"./#v0.7/type/turtle_client\">turtle_client</a>.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_LOCK_ERROR      The lock couldn&#39;t be acquired\n\nTURTLE_RETURN_UNLOCK_ERROR    The lock couldn&#39;t be released\n</code></pre>\n","group":"stack"},"turtle_stack_load":{"type":"function","file":"turtle.h","line":664,"lineto":664,"args":[{"name":"stack","type":"struct turtle_stack *","comment":"The stack object\n"}],"argline":"struct turtle_stack *stack","sig":"struct turtle_stack *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Load the stack elevation data into memory</p>\n","comments":"<p class=\"longComment\">Load the stack elevation data into memory, until the max stack size is reached or all tiles have been loaded.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_LOCK_ERROR      The lock couldn&#39;t be acquired\n\nTURTLE_RETURN_UNLOCK_ERROR    The lock couldn&#39;t be released\n</code></pre>\n","group":"stack"},"turtle_stack_elevation":{"type":"function","file":"turtle.h","line":691,"lineto":693,"args":[{"name":"stack","type":"struct turtle_stack *","comment":"The stack object\n"},{"name":"latitude","type":"double","comment":"The geodetic latitude\n"},{"name":"longitude","type":"double","comment":"The geodetic longitude\n"},{"name":"elevation","type":"double *","comment":"The estimated elevation\n"},{"name":"inside","type":"int *","comment":"Flag for bounds check or <code>NULL</code>\n"}],"argline":"struct turtle_stack *stack, double latitude, double longitude, double *elevation, int *inside","sig":"struct turtle_stack *::double::double::double *::int *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Get the elevation at geodetic coordinates</p>\n","comments":"<p class=\"longComment\">Compute an estimate of the elevation at the given geodetic coordinates. The elevation is linearly interpolated using the 4 nodes that surround the given coordinate. Providing a non <code>NULL</code> value for <em>inside</em> allows to check if the provided coordinates are inside the stack tiles or not. <strong>Note</strong> that no bound error is raised in the latter case, when <em>inside</em> is not <code>NULL</code>.</p>\n\n<p class=\"longComment\"><strong>Warnings</strong> this function is not thread safe. A <a href=\"./#v0.7/type/turtle_client\">turtle_client</a> must be used instead for concurrent accesses to the stack data.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_PATH    The required elevation data are not in the stack path.\n</code></pre>\n","group":"stack"},"turtle_client_create":{"type":"function","file":"turtle.h","line":716,"lineto":717,"args":[{"name":"client","type":"struct turtle_client **","comment":"The client object\n"},{"name":"stack","type":"struct turtle_stack *","comment":"The serving stack\n"}],"argline":"struct turtle_client **client, struct turtle_stack *stack","sig":"struct turtle_client **::struct turtle_stack *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Create a new client to a stack of global topography data</p>\n","comments":"<p class=\"longComment\">Allocate memory for a new client for a thread safe access to the elevation data of a stack. The client is initialised as idle. Whenever a new elevation value is requested it will book the needed data to its master <a href=\"./#v0.7/type/turtle_stack\">turtle_stack</a> and release any left over ones. Use <code>turtle_client_clear</code>in order to force the release of any reserved data or <a href=\"./#v0.7/group/client/turtle_client_destroy\">turtle_client_destroy</a> in order to fully recover the client&#39;s memory.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_ADDRESS     The stack is not valid, e.g. it has no lock\n\nTURTLE_RETURN_MEMORY_ERROR    The client couldn&#39;t be allocated\n</code></pre>\n","group":"client"},"turtle_client_destroy":{"type":"function","file":"turtle.h","line":735,"lineto":736,"args":[{"name":"client","type":"struct turtle_client **","comment":"The client object\n"}],"argline":"struct turtle_client **client","sig":"struct turtle_client **","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Properly clean a client for a stack</p>\n","comments":"<p class=\"longComment\">Attempts to destroy a stack client. Any reserved elevation data are first freed. On a successful return <code>client</code> is set to <code>NULL</code>.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_LOCK_ERROR      The lock couldn&#39;t be acquired\n\nTURTLE_RETURN_UNLOCK_ERROR    The lock couldn&#39;t be released\n</code></pre>\n","group":"client"},"turtle_client_clear":{"type":"function","file":"turtle.h","line":754,"lineto":755,"args":[{"name":"client","type":"struct turtle_client *","comment":"The client object\n"}],"argline":"struct turtle_client *client","sig":"struct turtle_client *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Unbook any reserved elevation data</p>\n","comments":"<p class=\"longComment\">Notify the master stack that any previously reserved elevation data is no more needed.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_LOCK_ERROR      The lock couldn&#39;t be acquired\n\nTURTLE_RETURN_UNLOCK_ERROR    The lock couldn&#39;t be released\n</code></pre>\n","group":"client"},"turtle_client_elevation":{"type":"function","file":"turtle.h","line":783,"lineto":785,"args":[{"name":"client","type":"struct turtle_client *","comment":"The client object\n"},{"name":"latitude","type":"double","comment":"The geodetic latitude\n"},{"name":"longitude","type":"double","comment":"The geodetic longitude\n"},{"name":"elevation","type":"double *","comment":"The estimated elevation\n"},{"name":"inside","type":"int *","comment":"Flag for bounds check or <code>NULL</code>\n"}],"argline":"struct turtle_client *client, double latitude, double longitude, double *elevation, int *inside","sig":"struct turtle_client *::double::double::double *::int *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Thread safe access to the elevation data of a stack</p>\n","comments":"<p class=\"longComment\">Compute an estimate of the elevation at the given geodetic coordinates. The elevation is linearly interpolated using the 4 nodes that surround the given coordinate. Providing a non <code>NULL</code> value for <em>inside</em> allows to check if the provided coordinates are inside the stack tiles or not. <strong>Note</strong> that no bound error is raised in the latter case, when <em>inside</em> is not <code>NULL</code>.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_PATH        The required elevation data are not in the stack path\n\nTURTLE_RETURN_LOCK_ERROR      The lock couldn&#39;t be acquired\n\nTURTLE_RETURN_UNLOCK_ERROR    The lock couldn&#39;t be released\n</code></pre>\n","group":"client"},"turtle_stepper_create":{"type":"function","file":"turtle.h","line":802,"lineto":803,"args":[{"name":"stepper","type":"struct turtle_stepper **","comment":"The stepper object\n"}],"argline":"struct turtle_stepper **stepper","sig":"struct turtle_stepper **","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Create a new ECEF stepper</p>\n","comments":"<p class=\"longComment\">Allocate memory for a new stepper providing smart access to geodetic and elevation data given ECEF coordinates. Call <a href=\"./#v0.7/group/stepper/turtle_stepper_destroy\">turtle_stepper_destroy</a> in order to properly recover any allocated memory.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_MEMORY_ERROR    The stepper couldn&#39;t be allocated\n</code></pre>\n","group":"stepper"},"turtle_stepper_destroy":{"type":"function","file":"turtle.h","line":822,"lineto":823,"args":[{"name":"stepper","type":"struct turtle_stepper **","comment":"The stepper object\n"}],"argline":"struct turtle_stepper **stepper","sig":"struct turtle_stepper **","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Properly clean an ECEf stepper</p>\n","comments":"<p class=\"longComment\">Attempts to destroy an ECEF stepper. <strong>Note</strong> that the stepper might have created a <a href=\"./#v0.7/type/turtle_client\">turtle_client</a> for thread safe access to stack data. If so, the client is automatically destroyed as well.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_LOCK_ERROR      The client lock couldn&#39;t be acquired\n\nTURTLE_RETURN_UNLOCK_ERROR    The client lock couldn&#39;t be released\n</code></pre>\n","group":"stepper"},"turtle_stepper_geoid_set":{"type":"function","file":"turtle.h","line":837,"lineto":838,"args":[{"name":"stepper","type":"struct turtle_stepper *","comment":"The stepper object\n"},{"name":"geoid","type":"struct turtle_map *","comment":"A map object with the geoid undulations\n"}],"argline":"struct turtle_stepper *stepper, struct turtle_map *geoid","sig":"struct turtle_stepper *::struct turtle_map *","return":{"type":"void","comment":null},"description":"<p>Set a geoid model for altitude corrections</p>\n","comments":"<p class=\"longComment\">Note that by default no geoid undulations corrections are applied. Altitudes are w.r.t. WGS84 ellipsoid, not w.r.t. mean sea level.  For long range stepping this might introduce distortions of the ground since topography data are usually given w.r.t. mean sea level. Providing a geoid map allows to correct for this.</p>\n","group":"stepper"},"turtle_stepper_geoid_get":{"type":"function","file":"turtle.h","line":846,"lineto":847,"args":[{"name":"stepper","type":"const struct turtle_stepper *","comment":"The stepper object\n"}],"argline":"const struct turtle_stepper *stepper","sig":"const struct turtle_stepper *","return":{"type":"struct turtle_map *","comment":"A handle to the geoid map\n"},"description":"<p>Get the current geoid map</p>\n","comments":"","group":"stepper"},"turtle_stepper_range_set":{"type":"function","file":"turtle.h","line":860,"lineto":861,"args":[{"name":"stepper","type":"struct turtle_stepper *","comment":"The stepper object\n"},{"name":"range","type":"double","comment":"The approximation range, in m\n"}],"argline":"struct turtle_stepper *stepper, double range","sig":"struct turtle_stepper *::double","return":{"type":"void","comment":null},"description":"<p>Set the validity range for local approximation to geographic transforms</p>\n","comments":"<p class=\"longComment\">Setting a strictly positive range enables the use of local linear approximations (LLA) to geographic transforms, for small consecutive steps. The default range value is 1 m. Set this to zero in order to disable LLA.</p>\n","group":"stepper"},"turtle_stepper_range_get":{"type":"function","file":"turtle.h","line":869,"lineto":870,"args":[{"name":"stepper","type":"const struct turtle_stepper *","comment":"The stepper object\n"}],"argline":"const struct turtle_stepper *stepper","sig":"const struct turtle_stepper *","return":{"type":"double","comment":"The approximation range, in m.\n"},"description":"<p>Get the validity range for local approximation to geographic transforms</p>\n","comments":"","group":"stepper"},"turtle_stepper_slope_get":{"type":"function","file":"turtle.h","line":878,"lineto":879,"args":[{"name":"stepper","type":"const struct turtle_stepper *","comment":"The stepper object\n"}],"argline":"const struct turtle_stepper *stepper","sig":"const struct turtle_stepper *","return":{"type":"double","comment":"The slope factor*\n"},"description":"<p>Get the slope factor for the stepping algorithm</p>\n","comments":"","group":"stepper"},"turtle_stepper_slope_set":{"type":"function","file":"turtle.h","line":890,"lineto":891,"args":[{"name":"stepper","type":"struct turtle_stepper *","comment":"The stepper object\n"},{"name":"slope","type":"double","comment":"The slope factor\n"}],"argline":"struct turtle_stepper *stepper, double slope","sig":"struct turtle_stepper *::double","return":{"type":"void","comment":null},"description":"<p>Set the slope factor for the stepping algorithm</p>\n","comments":"<p class=\"longComment\">Setting a slope factor smaller than one allows to resolve stepper slopes but at the cost of slowing down the stepping. The default value is 0.4.</p>\n","group":"stepper"},"turtle_stepper_resolution_get":{"type":"function","file":"turtle.h","line":899,"lineto":900,"args":[{"name":"stepper","type":"const struct turtle_stepper *","comment":"The stepper object\n"}],"argline":"const struct turtle_stepper *stepper","sig":"const struct turtle_stepper *","return":{"type":"double","comment":"The resolution factor\n"},"description":"<p>Get the resolution factor for the stepping algorithm</p>\n","comments":"","group":"stepper"},"turtle_stepper_resolution_set":{"type":"function","file":"turtle.h","line":911,"lineto":912,"args":[{"name":"stepper","type":"struct turtle_stepper *","comment":"The stepper object\n"},{"name":"resolution","type":"double","comment":"The resolution factor\n"}],"argline":"struct turtle_stepper *stepper, double resolution","sig":"struct turtle_stepper *::double","return":{"type":"void","comment":null},"description":"<p>Set the resolution factor for the stepping algorithm</p>\n","comments":"<p class=\"longComment\">The resolution factor corresponds to the minimum length for the initial step. Its default value is 1E-02 (1 cm).</p>\n","group":"stepper"},"turtle_stepper_add_layer":{"type":"function","file":"turtle.h","line":938,"lineto":939,"args":[{"name":"stepper","type":"struct turtle_stepper *","comment":"The stepper object\n"}],"argline":"struct turtle_stepper *stepper","sig":"struct turtle_stepper *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Add a new topography layer for the stepper</p>\n","comments":"<p class=\"longComment\">Add a new topography layer. Data can be further added to the layer using the <code>turtle_stepper_add_*</code> functions. If the current layer is empty, no new layer is added. At creation, the stepper topography is initialised with a single empty layer.</p>\n\n<p class=\"longComment\">Complex topographies can be described by using multiple layers. For example, water can be added on top of the ground, a soil below, a canopy above, etc. The stepper inspects the topography starting with the bottom layer and going up, until it finds a layer lying above the current position.</p>\n\n<p class=\"longComment\"><strong>Note</strong> that the last added layer is the top one. But, the lower a layer the higher its priority. This is the opposite behaviour than data within a layer.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_MEMORY_ERROR    The layer couldn&#39;t be allocated.\n</code></pre>\n","group":"stepper"},"turtle_stepper_add_stack":{"type":"function","file":"turtle.h","line":965,"lineto":967,"args":[{"name":"stepper","type":"struct turtle_stepper *","comment":"The stepper object\n"},{"name":"stack","type":"struct turtle_stack *","comment":"The stack to access\n"},{"name":"offset","type":"double","comment":"Any offset to the elevation data\n"}],"argline":"struct turtle_stepper *stepper, struct turtle_stack *stack, double offset","sig":"struct turtle_stepper *::struct turtle_stack *::double","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Add a <a href=\"./#v0.7/type/turtle_stack\">turtle_stack</a> data resource to the current topography layer</p>\n","comments":"<p class=\"longComment\">Register a <a href=\"./#v0.7/type/turtle_stack\">turtle_stack</a> data resource for the current topography layer of the stepper. An offset to the native elevation data can be specified as well. Note that if the stack supports multi-threading, i.e. if it has a registered lock, then a <a href=\"./#v0.7/type/turtle_client\">turtle_client</a> is automatically created in order to access the stack data.</p>\n\n<p class=\"longComment\"><strong>Note</strong> that the last registered data within the current layer is the top data, i.e. it has priority over data beneath.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_BAD_ADDRESS     The client could not be created.\n\nTURTLE_RETURN_MEMORY_ERROR    The layer couldn&#39;t be allocated.\n</code></pre>\n","group":"stepper"},"turtle_stepper_add_map":{"type":"function","file":"turtle.h","line":988,"lineto":989,"args":[{"name":"stepper","type":"struct turtle_stepper *","comment":"The stepper object\n"},{"name":"map","type":"struct turtle_map *","comment":"The map to access\n"},{"name":"offset","type":"double","comment":"Any offset to the elevation data\n"}],"argline":"struct turtle_stepper *stepper, struct turtle_map *map, double offset","sig":"struct turtle_stepper *::struct turtle_map *::double","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Add a <a href=\"./#v0.7/type/turtle_map\">turtle_map</a> data resource to the current topography layer</p>\n","comments":"<p class=\"longComment\">Register a <a href=\"./#v0.7/type/turtle_map\">turtle_map</a> data resource for the current topography layer of the stepper. An offset to the native elevation data can be specified as well.</p>\n\n<p class=\"longComment\"><strong>Note</strong> that the last registered data within the current layer is the top data, i.e. it has priority over data beneath.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_MEMORY_ERROR    The layer couldn&#39;t be allocated\n</code></pre>\n","group":"stepper"},"turtle_stepper_add_flat":{"type":"function","file":"turtle.h","line":1009,"lineto":1010,"args":[{"name":"stepper","type":"struct turtle_stepper *","comment":"The stepper object\n"},{"name":"ground_level","type":"double","comment":null}],"argline":"struct turtle_stepper *stepper, double ground_level","sig":"struct turtle_stepper *::double","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Add a flat data resource to the current topography layer</p>\n","comments":"<p class=\"longComment\">Register a <code>flat</code> (zero elevation) data resource for the current topography layer of the stepper. An offset can be specified as well.</p>\n\n<p class=\"longComment\"><strong>Note</strong> that the last registered data within the current layer is the top data, i.e. it has priority over data beneath.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_MEMORY_ERROR    The layer couldn&#39;t be allocated\n</code></pre>\n","group":"stepper"},"turtle_stepper_step":{"type":"function","file":"turtle.h","line":1056,"lineto":1059,"args":[{"name":"stepper","type":"struct turtle_stepper *","comment":"The stepper object\n"},{"name":"position","type":"double *","comment":"The initial (final) ECEF position\n"},{"name":"direction","type":"const double *","comment":"The initial direction in ECEF, or <code>NULL</code>\n"},{"name":"latitude","type":"double *","comment":"The (final) geodetic latitude\n"},{"name":"longitude","type":"double *","comment":"The (final) geodetic longitude\n"},{"name":"altitude","type":"double *","comment":"The (final) geodetic altitude\n"},{"name":"elevation","type":"double *","comment":"The (final) topography elevation(s)\n"},{"name":"step","type":"double *","comment":null},{"name":"index","type":"int *","comment":"The (final) topography and/or meta-data indices\n"}],"argline":"struct turtle_stepper *stepper, double *position, const double *direction, double *latitude, double *longitude, double *altitude, double *elevation, double *step, int *index","sig":"struct turtle_stepper *::double *::const double *::double *::double *::double *::double *::double *::int *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Compute (or do) a step through the topography using ECEF coordinates</p>\n","comments":"<p class=\"longComment\">If <em>direction</em> is <code>NULL</code>, sample the geography data at the given ECEF position and compute a tentative <em>step length</em>. The top most valid data in the stepper&#39;s stack are returned. If no valid topography layer was found a negative <em>layer</em> value is returned, or an error is raised if <em>index</em> points to <code>NULL</code>.</p>\n\n<p class=\"longComment\">If a <em>direction</em> is provided, do a single step through the topography along the given direction, using the tentative <em>step length</em>. If a change of medium occurs, the boundary is located using a binary search. At exit the ECEF position is updated. If the step exit the topography area and if <em>index</em> is non <code>NULL</code>, then a negative value is filled to <code>index[0]</code>. Otherwise an error is raised.</p>\n\n<p class=\"longComment\">If the stepper has a single topography layer, the matching meta data elevation value and the corresponding index are returned. Else, if non <code>NULL</code>, <em>elevation</em> and <em>index</em> must be size 2 arrays. Then, the elevation values of the lower (<code>elevation[0]</code>) and upper (<code>elevation[1]</code>) bounding layers are returned. The index array is filled with the containing topography layer (<code>index[0]</code>) and the matching meta-data inside the layer (<code>index[1]</code>).</p>\n\n<p class=\"longComment\">Note that any of the output data can point to <code>NULL</code> if it is of no interest. Note also that depending of the set local <em>range</em>, an approximation might be used for computing geographic coordinates.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_DOMAIN_ERROR    The provided position is outside of all data\n</code></pre>\n","group":"stepper"},"turtle_stepper_position":{"type":"function","file":"turtle.h","line":1083,"lineto":1085,"args":[{"name":"stepper","type":"struct turtle_stepper *","comment":"The stepper object\n"},{"name":"latitude","type":"double","comment":"The geodetic latitude\n"},{"name":"longitude","type":"double","comment":"The geodetic longitude\n"},{"name":"height","type":"double","comment":"The height w.r.t. the layer elevation\n"},{"name":"layer_index","type":"int","comment":"The index of the reference layer\n"},{"name":"position","type":"double *","comment":"The corresponding ECEF position\n"},{"name":"data_index","type":"int *","comment":"The index of the matching meta-data\n"}],"argline":"struct turtle_stepper *stepper, double latitude, double longitude, double height, int layer_index, double *position, int *data_index","sig":"struct turtle_stepper *::double::double::double::int::double *::int *","return":{"type":"enum turtle_return","comment":"On success <code>TURTLE_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below\n"},"description":"<p>Convert a geograhic location to an ECEF one</p>\n","comments":"<p class=\"longComment\">Inspect the stepper&#39;s geometry layer and provide the top most ECEF position. If no valid meta-data was found a negative <em>data_index</em> value is returned, or an error is raised if <em>data_index</em> points to <code>NULL</code>.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code>TURTLE_RETURN_DOMAIN_ERROR    The provided position is outside of all data\n</code></pre>\n","group":"stepper"}},"callbacks":{"turtle_function_t":{"type":"callback","file":"turtle.h","line":114,"lineto":114,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Generic function pointer</p>\n","comments":"<p class=\"longComment\">This is a generic function pointer used to identify TURTLE&#39;s library functions, e.g. for error handling.</p>\n"},"turtle_error_handler_t":{"type":"callback","file":"turtle.h","line":133,"lineto":134,"args":[{"name":"code","type":"enum turtle_return","comment":"The TURTLE return code\n"},{"name":"function","type":"turtle_function_t *","comment":null},{"name":"message","type":"const char *","comment":"A formatted message describing the error\n"}],"argline":"enum turtle_return code, turtle_function_t *function, const char *message","sig":"enum turtle_return::turtle_function_t *::const char *","return":{"type":"void","comment":null},"description":"<p>Callback for handling TURTLE library errors</p>\n","comments":"<p class=\"longComment\">The user might provide its own error handler. By default errors are printed to <code>stderr</code> and a hard exit occurs.</p>\n\n<p class=\"longComment\"><strong>Note</strong> : providing a <code>NULL</code> error handler disables error handling. Nevertheless, the TURTLE library functions will still return and error code.</p>\n\n<p class=\"longComment\"><strong>Warnings</strong></p>\n\n<p class=\"longComment\">This callback <em>must</em> be thread safe if a <a href=\"./#v0.7/type/turtle_client\">turtle_client</a> is used.</p>\n"},"turtle_stack_locker_t":{"type":"callback","file":"turtle.h","line":149,"lineto":149,"args":[],"argline":"","sig":"","return":{"type":"int","comment":"<code>0</code> on success, any other value otherwise.\n"},"description":"<p>Callbacks for managing concurrent accesses to the stack</p>\n","comments":"<p class=\"longComment\">For multi-threaded applications with a <a href=\"./#v0.7/type/turtle_stack\">turtle_stack</a> and <code>turtle_client</code>s the user must supply a <code>lock</code> and <code>unlock</code> callback providing exclusive access to critical sections, e.g. using a semaphore.</p>\n\n<p class=\"longComment\"><strong>Warnings</strong></p>\n\n<p class=\"longComment\">The callback <em>must</em> return <code>0</code> if the (un)lock was successful.</p>\n"}},"globals":{},"types":[["turtle_client",{"decl":[],"type":"struct","value":"turtle_client","file":"turtle.h","line":83,"lineto":83,"tdef":null,"description":" Opaque structure for a stack client, providing thread safe access to\n elevation data","comments":"","fields":[],"used":{"returns":[],"needs":["turtle_client_clear","turtle_client_create","turtle_client_destroy","turtle_client_elevation"]}}],["turtle_map",{"decl":[],"type":"struct","value":"turtle_map","file":"turtle.h","line":72,"lineto":72,"tdef":null,"description":" Opaque structure for elevation maps","comments":"","fields":[],"used":{"returns":["turtle_stepper_geoid_get"],"needs":["turtle_map_create","turtle_map_destroy","turtle_map_dump","turtle_map_elevation","turtle_map_fill","turtle_map_load","turtle_map_meta","turtle_map_node","turtle_map_projection","turtle_stepper_add_map","turtle_stepper_geoid_set"]}}],["turtle_map_info",{"decl":["int nx","int ny","double [2] x","double [2] y","double [2] z","const char * encoding"],"type":"struct","value":"turtle_map_info","file":"turtle.h","line":93,"lineto":106,"block":"int nx\nint ny\ndouble [2] x\ndouble [2] y\ndouble [2] z\nconst char * encoding","tdef":null,"description":" Meta data for elevation maps","comments":"","fields":[{"type":"int","name":"nx","comments":"Number of grid nodes along X \n"},{"type":"int","name":"ny","comments":"Number of grid nodes along Y \n"},{"type":"double [2]","name":"x","comments":"X coordinate range (min, max) \n"},{"type":"double [2]","name":"y","comments":"Y coordinate range (min, max) \n"},{"type":"double [2]","name":"z","comments":"Z coordinate range (min, max) \n"},{"type":"const char *","name":"encoding","comments":"Data encoding format \n"}],"used":{"returns":[],"needs":["turtle_map_create","turtle_map_meta"]}}],["turtle_projection",{"decl":[],"type":"struct","value":"turtle_projection","file":"turtle.h","line":67,"lineto":67,"tdef":null,"description":" Opaque structure for geographic projections","comments":"","fields":[],"used":{"returns":["turtle_map_projection"],"needs":["turtle_projection_configure","turtle_projection_create","turtle_projection_destroy","turtle_projection_name","turtle_projection_project","turtle_projection_unproject"]}}],["turtle_return",{"decl":["TURTLE_RETURN_SUCCESS","TURTLE_RETURN_BAD_ADDRESS","TURTLE_RETURN_BAD_EXTENSION","TURTLE_RETURN_BAD_FORMAT","TURTLE_RETURN_BAD_PROJECTION","TURTLE_RETURN_BAD_JSON","TURTLE_RETURN_DOMAIN_ERROR","TURTLE_RETURN_LIBRARY_ERROR","TURTLE_RETURN_LOCK_ERROR","TURTLE_RETURN_MEMORY_ERROR","TURTLE_RETURN_PATH_ERROR","TURTLE_RETURN_UNLOCK_ERROR","N_TURTLE_RETURNS"],"type":"enum","file":"turtle.h","line":35,"lineto":62,"block":"TURTLE_RETURN_SUCCESS\nTURTLE_RETURN_BAD_ADDRESS\nTURTLE_RETURN_BAD_EXTENSION\nTURTLE_RETURN_BAD_FORMAT\nTURTLE_RETURN_BAD_PROJECTION\nTURTLE_RETURN_BAD_JSON\nTURTLE_RETURN_DOMAIN_ERROR\nTURTLE_RETURN_LIBRARY_ERROR\nTURTLE_RETURN_LOCK_ERROR\nTURTLE_RETURN_MEMORY_ERROR\nTURTLE_RETURN_PATH_ERROR\nTURTLE_RETURN_UNLOCK_ERROR\nN_TURTLE_RETURNS","tdef":null,"description":" Return Codes used by the TURTLE library","comments":"","fields":[{"type":"int","name":"TURTLE_RETURN_SUCCESS","comments":"<p class=\"longComment\">The operation succeeded </p>\n","value":0},{"type":"int","name":"TURTLE_RETURN_BAD_ADDRESS","comments":"<p class=\"longComment\">A wrong pointer address was provided, e.g. NULL </p>\n","value":1},{"type":"int","name":"TURTLE_RETURN_BAD_EXTENSION","comments":"<p class=\"longComment\">A provided file extension is not supported or recognised </p>\n","value":2},{"type":"int","name":"TURTLE_RETURN_BAD_FORMAT","comments":"<p class=\"longComment\">A provided file or string has a wrong format </p>\n","value":3},{"type":"int","name":"TURTLE_RETURN_BAD_PROJECTION","comments":"<p class=\"longComment\">A provided <a href=\"./#v0.7/type/turtle_projection\">turtle_projection</a> is not supported </p>\n","value":4},{"type":"int","name":"TURTLE_RETURN_BAD_JSON","comments":"<p class=\"longComment\">Some JSON metadata couldn&#39;t be understood </p>\n","value":5},{"type":"int","name":"TURTLE_RETURN_DOMAIN_ERROR","comments":"<p class=\"longComment\">Some input parameters are out of their validity range </p>\n","value":6},{"type":"int","name":"TURTLE_RETURN_LIBRARY_ERROR","comments":"<p class=\"longComment\">An TURTLE low level library error occurred </p>\n","value":7},{"type":"int","name":"TURTLE_RETURN_LOCK_ERROR","comments":"<p class=\"longComment\">A lock couldn&#39;t be acquired </p>\n","value":8},{"type":"int","name":"TURTLE_RETURN_MEMORY_ERROR","comments":"<p class=\"longComment\">Some memory couldn&#39;t be allocated </p>\n","value":9},{"type":"int","name":"TURTLE_RETURN_PATH_ERROR","comments":"<p class=\"longComment\">A provided path wasn&#39;t found </p>\n","value":10},{"type":"int","name":"TURTLE_RETURN_UNLOCK_ERROR","comments":"<p class=\"longComment\">A lock couldn&#39;t be released </p>\n","value":11},{"type":"int","name":"N_TURTLE_RETURNS","comments":"<p class=\"longComment\">The number of TURTLE error codes </p>\n","value":12}],"used":{"returns":["turtle_client_clear","turtle_client_create","turtle_client_destroy","turtle_client_elevation","turtle_map_create","turtle_map_dump","turtle_map_elevation","turtle_map_fill","turtle_map_load","turtle_map_node","turtle_projection_configure","turtle_projection_create","turtle_projection_project","turtle_projection_unproject","turtle_stack_clear","turtle_stack_create","turtle_stack_elevation","turtle_stack_load","turtle_stepper_add_flat","turtle_stepper_add_layer","turtle_stepper_add_map","turtle_stepper_add_stack","turtle_stepper_create","turtle_stepper_destroy","turtle_stepper_position","turtle_stepper_step"],"needs":["turtle_error_handler_t"]}}],["turtle_stack",{"decl":[],"type":"struct","value":"turtle_stack","file":"turtle.h","line":77,"lineto":77,"tdef":null,"description":" Opaque structure for a stack of global topography data","comments":"","fields":[],"used":{"returns":[],"needs":["turtle_client_create","turtle_stack_clear","turtle_stack_create","turtle_stack_destroy","turtle_stack_elevation","turtle_stack_load","turtle_stepper_add_stack"]}}],["turtle_stepper",{"decl":[],"type":"struct","value":"turtle_stepper","file":"turtle.h","line":88,"lineto":88,"tdef":null,"description":" Opaque structure for stepping through geographic data","comments":"","fields":[],"used":{"returns":[],"needs":["turtle_stepper_add_flat","turtle_stepper_add_layer","turtle_stepper_add_map","turtle_stepper_add_stack","turtle_stepper_create","turtle_stepper_destroy","turtle_stepper_geoid_get","turtle_stepper_geoid_set","turtle_stepper_position","turtle_stepper_range_get","turtle_stepper_range_set","turtle_stepper_resolution_get","turtle_stepper_resolution_set","turtle_stepper_slope_get","turtle_stepper_slope_set","turtle_stepper_step"]}}]],"prefix":"include","groups":[["client",["turtle_client_clear","turtle_client_create","turtle_client_destroy","turtle_client_elevation"]],["ecef",["turtle_ecef_from_geodetic","turtle_ecef_from_horizontal","turtle_ecef_to_geodetic","turtle_ecef_to_horizontal"]],["error",["turtle_error_function","turtle_error_handler_get","turtle_error_handler_set"]],["map",["turtle_map_create","turtle_map_destroy","turtle_map_dump","turtle_map_elevation","turtle_map_fill","turtle_map_load","turtle_map_meta","turtle_map_node","turtle_map_projection"]],["projection",["turtle_projection_configure","turtle_projection_create","turtle_projection_destroy","turtle_projection_name","turtle_projection_project","turtle_projection_unproject"]],["stack",["turtle_stack_clear","turtle_stack_create","turtle_stack_destroy","turtle_stack_elevation","turtle_stack_load"]],["stepper",["turtle_stepper_add_flat","turtle_stepper_add_layer","turtle_stepper_add_map","turtle_stepper_add_stack","turtle_stepper_create","turtle_stepper_destroy","turtle_stepper_geoid_get","turtle_stepper_geoid_set","turtle_stepper_position","turtle_stepper_range_get","turtle_stepper_range_set","turtle_stepper_resolution_get","turtle_stepper_resolution_set","turtle_stepper_slope_get","turtle_stepper_slope_set","turtle_stepper_step"]]]}